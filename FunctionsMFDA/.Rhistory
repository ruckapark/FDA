plot(-4:4, -4:4, type = 'n')
points(0,0)
points(0,1)
plot(-4:4, -4:4, type = 'n')
points(0,0)
points(0,-2)
points(0,1)
library(tibble)
library(fda)
vec2Lfd(c(0,(2*pi/365)^2,0), c(0,365))
testLfd <- vec2Lfd(c(0,(2*pi/365)^2,0), c(0,365))
View(testLfd)
View(testLfd)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
# Make functional data objects of x data
library(fda)
#generate new df for x with each time series in vector form
ncurves <- ncol(dfX)
npoints <- nrow(dfX)
ID <- 1:ncurves
t <- vector(mode = "list", length = ncurves)
x <- vector(mode = "list", length = ncurves)
for (i in 1:ncurves){
col <- colnames(dfX)[i]
t[i] <- list(1:npoints)
x[i] <- list(dfX[,col])
}
columns <- c("id","time","xvalue")
df <- data.frame(matrix(nrow = ncurves,ncol = length(columns)))
colnames(df) <- columns
df$id <- ID
df$time <- t
df$xvalue <- x
# FDA parameters
knots    = c(seq(0,npoints,20)) #Location of knots
n_knots   = length(knots) #Number of knots
n_order   = 4 # order of basis functions: for cubic b-splines: order = 3 + 1
n_basis   = length(knots) + n_order - 2;
basis = create.bspline.basis(rangeval = c(0,npoints), n_basis)
# Use funHDDC for MFDA
View(df)
View(df)
c(0,2,0)
c(0,(2*pi/365)^2,0)
View(df)
View(df)
Lfd <- int2Lfd(3,c(0,npoints-1))
Lfd <- int2Lfd(2)
fdParam <- fdPar(basis,Lfd,1e4)
df_fd <- smooth.basis(0:199,df$xvalue,dfParam)
df_fd <- smooth.basis(0:199,df$xvalue[1],dfParam)
df$xvalue
daily$tempav
dfX
df_fd <- smooth.basis(0:199,dfX,dfParam)
dfX
daily$tempav
df_temp <- daily$tempav
View(df_temp)
View(df_temp)
temp <- data.matrix(dfX)
df_fd <- smooth.basis(1:200,temp,dfParam)
df_fd <- smooth.basis(1:200,temp,fdParam)
View(df_fd)
View(df_fd)
quartz()
df_fd$fd
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fd$fd,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
window()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fd$fd,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
dev.new()
1+1
plot(cars)
plot(cars)
window()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fd$fd,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
install.packages("fields")
library(fields)
yvariance <- var.fd(df_fd$fd)
var_values <- eval.bifd(1:npoints,1:npoints,yvariance)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
contour(1:npoints,1:npoints,var_values,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
image.plot(1:365,1:365,tvvals,xlab='day',ylab='day',cex.lab=1.5,cex.axis=1.5)
corr = cor.fd(1:npoints,df_fd$fd)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
contour(1:npoints,1:npoints,corr,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
X_pca <- pca.fd(df_fd$fd,nharm = 3)
names(X_pca)
X_pca$varprop
X_pca$values
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(X_pca$values,xlab='component',ylab='variance',col="red",
cex.lab=1.5,cex.axis=1.5,cex=2)
#Plot cumulative percentage explained with added components
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(cumsum(X_pca$values[1:10])/sum(X_pca$values),xlab='Number of Components',
ylab='cumulative variance explained',col=2,cex.lab=2,
cex.axis=2,cex=2)
abline(h=0.99)
#Mean curves - meanfd
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fd$fd,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5,col=4)
lines(df_fd$meanfd,lwd=2.5,col=2)
#FDA
Lfd <- int2Lfd(2)
fdParam <- fdPar(basis,Lfd,1e4)
df_fd <- smooth.basis(1:200,temp,fdParam)
#visualise
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fd$fd,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
#variance and covariance of the functional data + correlation coefficient
library(fields)
yvariance <- var.fd(df_fd$fd)
var_values <- eval.bifd(1:npoints,1:npoints,yvariance)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
contour(1:npoints,1:npoints,var_values,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
#image.plot(1:365,1:365,tvvals,xlab='day',ylab='day',cex.lab=1.5,cex.axis=1.5)
corr = cor.fd(1:npoints,df_fd$fd)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
contour(1:npoints,1:npoints,corr,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
#perform PCA
X_pca <- pca.fd(df_fd$fd,nharm = 2)
names(X_pca)
X_pca$varprop #shows only two are necessary here
#Plot the eigenvalues (proportional to explained variance of each component)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(X_pca$values,xlab='component',ylab='variance',col="red",
cex.lab=1.5,cex.axis=1.5,cex=2)
#Plot cumulative percentage explained with added components
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(cumsum(X_pca$values[1:10])/sum(X_pca$values),xlab='Number of Components',
ylab='cumulative variance explained',col=2,cex.lab=2,
cex.axis=2,cex=2)
abline(h=0.99)
#Mean curves - meanfd (not sure the lines function is working)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fd$fd,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5,col=4)
lines(df_fd$meanfd,lwd=2.5,col=2)
#Functional principal components
harmfd = df_fd$harmonics
harmvals = eval.fd(1:npoints,harmfd)
dim(harmvals) # The top 4 FPCs
#plot the first FPC
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=2,cex.axis=2,type='l')
harmfd = X_pca$harmonics
harmvals = eval.fd(1:npoints,harmfd)
dim(harmvals) # The top 4 FPCs
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=2,cex.axis=2,type='l')
plot(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=2,cex.axis=2,type='l')
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=2,cex.axis=2,type='l')
plot(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=2,cex.axis=2,type='l')
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=2,cex.axis=2,type='l')
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=2,cex.axis=2,type='l')
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=2,cex.axis=2,type='l')
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=2,cex.axis=2,type='l')
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
ylim(-1,1)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
ylim(-1,1)
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',ylim=c(-1,1))
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',ylim=c(-0.2,0.6))
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
#plot the first FPC
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',ylim=c(-0.2,0.3))
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',ylim=c(-0.1,0.2))
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
#plot the first FPC
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',ylim=c(-0.1,0.16))
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
#plot the first FPC
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',ylim=c(-0.09,0.16))
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l')
#plot the first FPC
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',ylim=c(-0.09,0.16),col='blue')
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',col='red')
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(X_pca$scores[,1:2],xlab='PC Score 1',ylab='PC Score 2',col=4,
cex.lab=1.5,cex.axis=1.5,cex=1)
text(temppca$scores[,1],temppca$scores[,2],labels=daily$place,cex=1)
help(funHDDC)
library(funHDDC)
help("funHDDC")
#visualise
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fd$fd,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(X_pca$scores[,1:2],xlab='PC Score 1',ylab='PC Score 2',col=4,
cex.lab=1.5,cex.axis=1.5,cex=1)
text(temppca$scores[,1],temppca$scores[,2],labels=daily$place,cex=1)
res.uni <- funHDDC(df_fd$fd,K=3,model="AkBkQkDk",init="kmeans",threshold=0.2)
table(cls,res.uni$class,dnn=c("True clusters","FunHDDC clusters"))
data("trigo")
1+!
!
1
View(res.uni)
View(res.uni)
res.uni$class
trigo[,101]
grid.arrange(p1,p2,nrow = 1)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
sessionInfo()
install.packages("gtable")
install.packages("installr")
library(installr)
updateR()
