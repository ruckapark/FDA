ncurves <- ncol(dfX)
npoints <- nrow(dfX)
ID <- 1:ncurves
t <- vector(mode = "list", length = ncurves)
x <- vector(mode = "list", length = ncurves)
for (i in 1:ncurves){
col <- colnames(dfX)[i]
t[i] <- list(1:npoints)
x[i] <- list(dfX[,col])
}
columns <- c("id","time","xvalue")
df <- data.frame(matrix(nrow = ncurves,ncol = length(columns)))
colnames(df) <- columns
df$id <- ID
df$time <- t
df$xvalue <- x
# FDA parameters
knots    = c(seq(0,npoints,20)) #Location of knots
n_knots   = length(knots) #Number of knots
n_order   = 4 # order of basis functions: for cubic b-splines: order = 3 + 1
n_basis   = length(knots) + n_order - 2;
basis = create.bspline.basis(rangeval = c(0,npoints), n_basis)
#FDA
Lfd <- int2Lfd(2)
fdParam <- fdPar(basis,Lfd,1e4)
df_fd <- smooth.basis(1:npoints,data.matrix(dfX),fdParam)
#visualise
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fd$fd,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
#variance and covariance of the functional data + correlation coefficient
library(fields)
yvariance <- var.fd(df_fd$fd)
var_values <- eval.bifd(1:npoints,1:npoints,yvariance)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
contour(1:npoints,1:npoints,var_values,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
#image.plot(1:365,1:365,tvvals,xlab='day',ylab='day',cex.lab=1.5,cex.axis=1.5)
corr = cor.fd(1:npoints,df_fd$fd)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
contour(1:npoints,1:npoints,corr,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5)
#perform PCA
X_pca <- pca.fd(df_fd$fd,nharm = 2)
names(X_pca)
X_pca$varprop #shows only two are necessary here
#Plot the eigenvalues (proportional to explained variance of each component)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(X_pca$values,xlab='component',ylab='variance',col="red",
cex.lab=1.5,cex.axis=1.5,cex=2)
#Plot cumulative percentage explained with added components
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(cumsum(X_pca$values[1:10])/sum(X_pca$values),xlab='Number of Components',
ylab='cumulative variance explained',col=2,cex.lab=2,
cex.axis=2,cex=2)
abline(h=0.99)
#Mean curves - meanfd (not sure the lines function is working)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fd$fd,xlab='time',ylab='Y',cex.lab=1.5,cex.axis=1.5,col=4)
lines(df_fd$meanfd,lwd=2.5,col=2)
#Functional principal components
harmfd = X_pca$harmonics
harmvals = eval.fd(1:npoints,harmfd)
dim(harmvals) # The top 2 FPCs of time dimension
#plot the first FPC
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(1:npoints,harmvals[,1],xlab='time',ylab='PC1',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',ylim=c(-0.09,0.16),col='blue')
lines(1:npoints,harmvals[,2],xlab='time',ylab='PC2',
lwd=4,lty=1,cex.lab=1,cex.axis=1,type='l',col='red')
#plot scores plot
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(X_pca$scores[,1:2],xlab='PC Score 1',ylab='PC Score 2',col=4,
cex.lab=1.5,cex.axis=1.5,cex=1)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames
pca <- univPCA(dfX)
plotPCA_comps(pca$PCA)
plotPCA_scores(pca$PCA)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames
pca <- univPCA(dfX)
plotPCA_comps(pca$PCA)
plotPCA_scores(pca$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca$fda,3)
print(res.X$class)
# Use funHDDC for MFDA with single with x values
library(funHDDC)
res.uni <- funHDDC(df_fd$fd,K=3,model="AkBkQkDk",init="kmeans",threshold=0.2)
print(res.uni$class)
temp1 <- X_pca
temp2 <- pca$fda
temp1 <- df_fd$fd
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca$fda$fd,3)
pca$fda
pca$fda$fd
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames
pca <- univPCA(dfX)
plotPCA_comps(pca$PCA)
plotPCA_scores(pca$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca$fda,3)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames
pca <- univPCA(dfX)
plotPCA_comps(pca$PCA)
plotPCA_scores(pca$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca$fda,3)
print(res.X$class)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames
pca <- univPCA(dfX)
plotPCA_comps(pca$PCA)
plotPCA_scores(pca$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca$fda,3)
print(res.X$class)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames - could put this in a function
pca.X <- univPCA(dfX)
plot_smoothed(pca.X$fda)
plotPCA_comps(pca.X$PCA)
plotPCA_scores(pca.X$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca.X$fda,3)
print(res.X$class)
pca.Y <- univPCA(dfY)
plot_smoothed(pca.Y$fda)
plotPCA_comps(pca.Y$PCA)
plotPCA_scores(pca.Y$PCA)
res.Y <- univCluster(pca.Y$fda,3)
pca.Z <- univPCA(dfZ)
plot_smoothed(pca.Z$fda)
plotPCA_comps(pca.Z$PCA)
plotPCA_scores(pca.Z$PCA)
res.Z <- univCluster(pca.Z$fda,2)
plotPCA_comps(pca.Z$PCA)
res.X$class
temp <- data.frame(Xclasses = res.X$class, Yclasses = res.Y$class, Zclasses = res.Z$class)
temp
classses <- data.frame(Xclasses = res.X$class, Yclasses = res.Y$class, Zclasses = res.Z$class)
print(classes)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames - could put this in a function
pca.X <- univPCA(dfX)
plot_smoothed(pca.X$fda)
plotPCA_comps(pca.X$PCA)
plotPCA_scores(pca.X$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca.X$fda,3)
print(res.X$class)
#repeat for Y
pca.Y <- univPCA(dfY)
plot_smoothed(pca.Y$fda)
plotPCA_comps(pca.Y$PCA)
plotPCA_scores(pca.Y$PCA)
res.Y <- univCluster(pca.Y$fda,3)
#repeat for Y
pca.Z <- univPCA(dfZ)
plot_smoothed(pca.Z$fda)
plotPCA_comps(pca.Z$PCA)
plotPCA_scores(pca.Z$PCA)
res.Z <- univCluster(pca.Z$fda,2)
#Print class results for three dimensions
classses <- data.frame(Xclasses = res.X$class, Yclasses = res.Y$class, Zclasses = res.Z$class)
plot_smoothed(pca.Z$fda)
res.X$class
res.Y$class
res.Z$class
pca.Z <- univPCA(dfZ,n_breakpoints=50)
plot_smoothed(pca.Z$fda)
pca.Z <- univPCA(dfZ,n_breakpoints=100)
plot_smoothed(pca.Z$fda)
plotPCA_comps(pca.Z$PCA)
plotPCA_scores(pca.Z$PCA)
res.Z <- univCluster(pca.Z$fda,2)
pca.Z <- univPCA(dfZ,n_breakpoints=100)
plot_smoothed(pca.Z$fda)
c(seq(0,200,5))
c(seq(0,200,50))
#repeat for z - should be two distinct pulse clusters
pca.Z <- univPCA(dfZ,breakpoint_spacing=5)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames - could put this in a function
pca.X <- univPCA(dfX)
plot_smoothed(pca.X$fda)
plotPCA_comps(pca.X$PCA)
plotPCA_scores(pca.X$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca.X$fda,3)
print(res.X$class)
#repeat for Y
pca.Y <- univPCA(dfY)
plot_smoothed(pca.Y$fda)
plotPCA_comps(pca.Y$PCA)
plotPCA_scores(pca.Y$PCA)
res.Y <- univCluster(pca.Y$fda,3)
#repeat for z - should be two distinct pulse clusters
pca.Z <- univPCA(dfZ,breakpoint_spacing=5)
plot_smoothed(pca.Z$fda)
pca.Z <- univPCA(dfZ,breakpoint_spacing=2)
plot_smoothed(pca.Z$fda)
c(seq(0,200,50))
pca.Z <- univPCA(dfZ,breakpoint_spacing=2)
plot_smoothed(pca.Z$fda)
pca.Z <- univPCA(dfZ,breakpoint_spacing=5)
plot_smoothed(pca.Z$fda)
pca.Z <- univPCA(dfZ,breakpoint_spacing=1)
plot_smoothed(pca.Z$fda)
pca.Z <- univPCA(dfZ,breakpoint_spacing=5,spline_order = 5)
plot_smoothed(pca.Z$fda)
pca.Z <- univPCA(dfZ,breakpoint_spacing=5,Lfd_order = 1)
plot_smoothed(pca.Z$fda)
pca.Z <- univPCA(dfZ,breakpoint_spacing=5,Lfd_order = 3)
pca.Z <- univPCA(dfZ,breakpoint_spacing=5,spline_order == 5,Lfd_order = 3)
pca.Z <- univPCA(dfZ,breakpoint_spacing=5,spline_order = 5,Lfd_order = 3)
pca.Z <- univPCA(dfZ,breakpoint_spacing=5,spline_order = 10,Lfd_order = 3)
View(dfZ)
View(dfZ)
ggplot(dfZ)
ggplot(dfZ, aes(x,y,col = group)) + geom_lin()
ggplot(dfZ, aes(x,y,col = group)) + geom_line()
ggplot(dfZ, aes(time,value)) + geom_line()
plot.ts(dfZ)
names(dfZ)[1]
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(dfZ$V1,xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
line(dfZ$V"",xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
line(dfZ$V2,xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
lines(dfZ$V2,xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
lines(dfZ$V3,xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
lines(dfZ$V12,xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames - could put this in a function
pca.X <- univPCA(dfX)
plot_smoothed(pca.X$fda)
plotPCA_comps(pca.X$PCA)
plotPCA_scores(pca.X$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca.X$fda,3)
print(res.X$class)
#repeat for Y
pca.Y <- univPCA(dfY)
plot_smoothed(pca.Y$fda)
plotPCA_comps(pca.Y$PCA)
plotPCA_scores(pca.Y$PCA)
res.Y <- univCluster(pca.Y$fda,3)
#repeat for z - should be two distinct pulse clusters
pca.Z <- univPCA(dfZ,base = 'f')
plot_smoothed(pca.Z$fda)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames - could put this in a function
pca.X <- univPCA(dfX)
plot_smoothed(pca.X$fda)
plotPCA_comps(pca.X$PCA)
plotPCA_scores(pca.X$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca.X$fda,3)
print(res.X$class)
#repeat for Y
pca.Y <- univPCA(dfY)
plot_smoothed(pca.Y$fda)
plotPCA_comps(pca.Y$PCA)
plotPCA_scores(pca.Y$PCA)
res.Y <- univCluster(pca.Y$fda,3)
#repeat for z - should be two distinct pulse clusters
pca.Z <- univPCA(dfZ,breakpoint_spacing = 5,base = 'f')
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
source("univPCA_function.R")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
#Perform PCA for each of the data frames - could put this in a function
pca.X <- univPCA(dfX)
plot_smoothed(pca.X$fda)
plotPCA_comps(pca.X$PCA)
plotPCA_scores(pca.X$PCA)
#Depending on PCA plot, decide on number of clusters
res.X <- univCluster(pca.X$fda,3)
print(res.X$class)
#repeat for Y
pca.Y <- univPCA(dfY)
plot_smoothed(pca.Y$fda)
plotPCA_comps(pca.Y$PCA)
plotPCA_scores(pca.Y$PCA)
res.Y <- univCluster(pca.Y$fda,3)
#repeat for z - should be two distinct pulse clusters
pca.Z <- univPCA(dfZ,breakpoint_spacing = 5,base = 'f')
plot_smoothed(pca.Z$fda)
plotPCA_comps(pca.Z$PCA)
plotPCA_scores(pca.Z$PCA)
res.Z <- univCluster(pca.Z$fda,2)
classses <- data.frame(Xclasses = res.X$class, Yclasses = res.Y$class, Zclasses = res.Z$class)
print(classes)
classes <- data.frame(Xclasses = res.X$class, Yclasses = res.Y$class, Zclasses = res.Z$class)
print(classes)
library(fda)
?gait
gaittime <- seq(0,1,len=20)
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(gaittime,gait[,,1],type='l',cex.lab=1.5,cex.axis=1.5,ylab='Hip')
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(gaittime,gait[,,2],type='l',cex.lab=1.5,cex.axis=1.5,ylab='Knee')
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(gait[,,1],gait[,,2],type='l',cex.lab=1.5,cex.axis=1.5,xlab='hip',ylab='Knee')
temp <- gait
data2d <- data.matrix((dfX+dfY),dim=c(200,20,2))
data2d <- data.matrix(dim=c(200,20,2))
data2d <- arrray(dim=c(200,20,2))
data2d <- array(dim=c(200,20,2))
data2d <- data.matrix(c(dfX,dfY))
View(data2d)
View(data2d)
data2d <- data.matrix(array(c(dfX,dfY),dim = c(200,20,2)))
View(data2d)
View(data2d)
View(data2d)
array(c(dfX,dfY),dim = c(200,20,2))
data2d <- array(c(dfX,dfY),dim = c(200,20,2))
View(data2d)
View(data2d)
dataX <- data.matrix(dfX)
dataY <- data.matrix(dfY)
dataXY <- array(c(dataX,dataY), dim=c(200,20,2))
dataXY
dataXY[1,1,1]
dataXY[1,1,2]
time <- 1:200
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(time,dataXY[,,1],type='l',cex.lab=1.5,cex.axis=1.5,ylab='Xdata')
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(time,dataXY[,,2],type='l',cex.lab=1.5,cex.axis=1.5,ylab='Ydata')
nrows(dataXY)
data.matrix(dataXU)
data.matrix(dataXY)
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
#Z data is in the wrong format
library(fda)
?gait #show gait data
temp <- gait
dataX <- data.matrix(dfX)
dataY <- data.matrix(dfY)
dataXY <- array(c(dataX,dataY), dim=c(200,20,2))
#FDA parameters
breakpoint_spacing <- 20
npoints <- 200
time <- 1:npoints
knots <- c(seq(0,npoints,breakpoint_spacing))
n_knots <- length(knots)
n_order <- 4 #BSpline order
n_basis <- length(knots) + n_order - 2
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(time,dataXY[,,1],type='l',cex.lab=1.5,cex.axis=1.5,ylab='Xdata')
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(time,dataXY[,,2],type='l',cex.lab=1.5,cex.axis=1.5,ylab='Ydata')
#Set up general fd object
basis = create.bspline.basis(rangeval = c(0,npoints), n_basis)
Lfd <- int2Lfd(2)
fdParam <- fdPar(basis,Lfd,1e4)
df_fda = smooth.basis(1:npoints,dataXY,fdParam)
df_fda$fd
df_fda$fd["Value1"]
df_fda$fd$Value1
df_fda$fd$Value1
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fda$fd,xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
df_fda$fdnames
df_fda$fd
fd <- df_fda$fd
fd$fdnames
fd$coefs
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(df_fda$fd[,,1],xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
plot(df_fda$fd[,,"Value1"],xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
fd <- df_fda$fd
fd$Value1
fd
fd$coefs
fd$coefs[,,1]
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(fd$coefs[,,1],xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5)
fd
fd[["Value1"]]
fd[[1]]
fd[[2]]
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(fd,xlab='time',ylab=ylab,cex.lab=1.5,cex.axis=1.5
dev.new()
fd$fdnames[[3]]
fd <- df_fda$fd
fd$fdnames[[3]] <- c("Xdata","Ydata")
fdvals <- eval.fd(time,fd)
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(fd,xlab='time',cex.lab=1.5,cex.axis=1.5)
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(time,fdvals[,,1],xlab='time',cex.lab=1.5,cex.axis=1.5)
time
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(fdvals[,,1],fdvals[,,2],xlab='time',cex.lab=1.5,cex.axis=1.5)
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(fdvals[,,1],fdvals[,,2],type='l',xlab='time',cex.lab=1.5,cex.axis=1.5)
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(array(time,dim = c(200,20)),fdvals[,,1],type='l',xlab='time',cex.lab=1.5,cex.axis=1.5)
XY.pca = pca.fd(fd,nharm = 3)
#plot mean
dev.new()
par(mfrow=c(2,1),mar = c(8, 8, 4, 2))
plot(XY.pca$meanfd,cex.lab=1.5,cex.axis=1.5)
dev.new()
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(XY.pca$values,cex.lab=1.5,cex.axis=1.5,xlab='PC',ylab='eigenvalue',col=4,cex=2)
XY.pca$varprop
sum(XY.pca$varprop)
#plot variance proportion
dev.new()
par(mfrow=c(1,2),mar = c(8, 8, 4, 2))
plot(XY.pca$harmonics,lwd=2,cex.lab=1.5,cex.axis=1.5)
#plot variance proportion
dev.new()
par(mfrow=c(2,1),mar = c(8, 8, 4, 2))
plot(XY.pca$harmonics,lwd=2,cex.lab=1.5,cex.axis=1.5)
#multidimensional clustering
library(funHDDC)
res.uni <- funHDDC(fd,K=4,model="AkBkQkDk",init="kmeans",threshold=0.2)
help("funHDDC")
source("univPCA_function.R")
xfd <- univPCA(dfX)$fd
yfd <- univPCA(dfY)$fd
res.uni <- funHDDC(c(xfd,yfd),K=4,model="AkBkQkDk",init="kmeans",threshold=0.2)
xfd <- univPCA(dfX)$fda
yfd <- univPCA(dfY)$fda
res.uni <- funHDDC(c(xfd,yfd),K=4,model="AkBkQkDk",init="kmeans",threshold=0.2)
res.uni <- funHDDC(list(xfd,yfd),K=4,model="AkBkQkDk",init="kmeans",threshold=0.2)
res.uni <- funHDDC(list(xfd,yfd),K=3,model="AkBkQkDk",init="kmeans",threshold=0.2)
print(res.uni$class)
res.uni <- funHDDC(xfd,K=3,model="AkBkQkDk",init="kmeans",threshold=0.2)
print(res.uni$class)
res.uni <- funHDDC(list(xfd,yfd),K=3,model="AkBkQkDk",init="kmeans",threshold=0.2)
print(res.uni$class)
res.uni <- funHDDC(list(xfd,yfd),K=4,model="AkBkQkDk",init="kmeans",threshold=0.2)
print(res.uni$class)
