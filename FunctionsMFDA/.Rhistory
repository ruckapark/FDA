plot(-4:4, -4:4, type = 'n')
points(0,0)
points(0,1)
plot(-4:4, -4:4, type = 'n')
points(0,0)
points(0,-2)
points(0,1)
# Import data
dfX <- read.csv('data\xdata_norm.csv')
# Import data
dfX <- read.csv('data\\xdata_norm.csv')
# Import data
dfX <- read.csv('data\\xdata_norm.csv')
listdir()
list.dirs()
# Import data
dfX <- read.csv('.data/xdata_norm.csv')
getwd()
# Import data
setwd('C:/Users/Admin/Documents/R/FDA/FunctionsMFDA')
dfX <- read.csv('.data/xdata_norm.csv')
list.dirs()
list.dirs("./data")
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
dfX <- read.csv(".data/xdata_norm.csv")
list.files("./data")
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
dfX <- read.csv(".data/xdata_norm.csv")
dfY <- read.csv(".data/ydata_norm.csv")
dfZ <- read.csv(".data/zdata_norm.csv")
# Import data
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
datafiles<- list.files("./data")
df <- read.csv2(datafiles[2])
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
dfX <- read.csv("./data/xdata_norm.csv")
dfY <- read.csv("./data/ydata_norm.csv")
dfZ <- read.csv("./data/zdata_norm.csv")
View(dfX)
View(dfX)
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
dfX <- read.csv("./data/xdata_norm.csv")
dfY <- read.csv("./data/ydata_norm.csv")
dfZ <- read.csv("./data/zdata_norm.csv")
View(dfX)
View(dfX)
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
dfX <- read.csv("./data/xdata_norm.csv",header = False)
dfY <- read.csv("./data/ydata_norm.csv",header = False)
dfZ <- read.csv("./data/zdata_norm.csv",header = False)
setwd("C:/Users/Admin/Documents/R/FDA/FunctionsMFDA")
dfX <- read.csv("./data/xdata_norm.csv",header = FALSE)
dfY <- read.csv("./data/ydata_norm.csv",header = FALSE)
dfZ <- read.csv("./data/zdata_norm.csv",header = FALSE)
View(dfX)
View(dfX)
install.packages(funHDDC)
install.packages()
package_add <- "https://cran.r-project.org/src/contrib/Archive/funHDDC/funHDDC_2.3.1.tar.gz"
install.packages(package_add, repos=NULL, type="source")
install.packages("fda")
library(fda)
install.packages(package_add, repos=NULL, type="source")
library(funHDDC)
help("funHDDC")
help("fda")
library(plotly)
install.packages("plotly")
View(dfX)
View(dfX)
dfX$V1
x1 <- dfX$V1
x1 <- vector(dfX$V1)
len(dfX)
length(dfX)
rowsum(dfX)
ros(dfX)
numrows(dfX)
nrows(dfX)
nrow(dfX)
dfX.cols
dfX.colnames
dfX.colnames()
colnames(dfX)
colnames(dfX)[1]
#generate new df for x with each time series in vector form
ncurves <- ncol(dfX)
npoints <- nrow(dfX)
ID <- 1:ncurves
t <- vector(mode = "list", length = npoints)
x <- vector(mode = "list", length = npoints)
1:npoints
for (i in 1:n_curves){
t[i] <- list(1:npoints)
x[i] <- list(dfX$colnames(dfX)[i])
}
for (i in 1:ncurves){
t[i] <- list(1:npoints)
x[i] <- list(dfX$colnames(dfX)[i])
}
for (i in 1:ncurves){
col <- colnames(dfX)[i]
t[i] <- list(1:npoints)
x[i] <- list(dfX$col)
}
col
dfX$V1
list(dfX$V1)
View(x)
View(x)
View(t)
View(t)
ncurves <- ncol(dfX)
npoints <- nrow(dfX)
ID <- 1:ncurves
t <- vector(mode = "list", length = ncurves)
x <- vector(mode = "list", length = ncurves)
for (i in 1:ncurves){
col <- colnames(dfX)[i]
t[i] <- list(1:npoints)
x[i] <- list(dfX$col)
}
View(t)
View(t)
View(x)
View(x)
list(dfX$V1)
x[1] <- list(dfX$V1)
View(x)
View(x)
list(dfX$col)
list(dfX$[col])
list(dfX$'col')
dfX[,col]
#generate new df for x with each time series in vector form
ncurves <- ncol(dfX)
npoints <- nrow(dfX)
ID <- 1:ncurves
t <- vector(mode = "list", length = ncurves)
x <- vector(mode = "list", length = ncurves)
for (i in 1:ncurves){
col <- colnames(dfX)[i]
t[i] <- list(1:npoints)
x[i] <- list(dfX[,col])
}
View(x)
View(x)
help(tibble)
df <- data.frame(ID,t,x)
View(df)
View(df)
View(df)
View(df)
df <- data.frame(curveID  = ID,
Time = t,
xData = x)
View(df)
View(df)
columns <- c("id","time","xvalue")
df <- data.frame(matrix(nrow = ncurves,ncol = length(columns)))
colnames(df) <- columns
View(df)
View(df)
length(t)
df$time <- t
View(df)
View(df)
columns <- c("id","time","xvalue")
df <- data.frame(matrix(nrow = ncurves,ncol = length(columns)))
colnames(df) <- columns
df$id <- ID
df$time <- t
df$xvalue <- x
View(df)
View(df)
seq(0,200,5)
knots    = c(seq(0,npoints,20)) #Location of knots
n_knots   = length(knots) #Number of knots
n_order   = 4 # order of basis functions: for cubic b-splines: order = 3 + 1
n_basis   = length(knots) + n_order - 2;
basis = create.bspline.basis(rangeval = c(0,max_time), n_basis)
basis = create.bspline.basis(rangeval = c(0,npoints), n_basis)
df_1 <- df %>% select(!c(ID,xvalue)) %>% unnest_longer(time)
install.packages("tidyverse")
library(tidyverse)
library(funHDDC)
library(tibble)
library(funHDDC)
library(tidyverse)
